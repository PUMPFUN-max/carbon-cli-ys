{%- if event.requires_imports %}
use super::super::types::*;
{%- endif %}
{% raw %}
use carbon_core::{borsh, CarbonDeserialize};
{% endraw %}

#[derive(CarbonDeserialize, Debug, serde::Serialize, serde::Deserialize, PartialEq, Eq, Clone, Hash)]
#[carbon(discriminator = "{{ event.discriminator }}")]
pub struct {{ event.struct_name }}{
    {%- for arg in event.args %}
    pub {{ arg.name }}: {{ arg.rust_type }},
    {%- endfor %}
}

pub trait ArrangeCompiledAccounts {
    type ArrangedAccounts;
    fn arrange_compiled_accounts(accounts: &[u8]) -> Option<Self::ArrangedAccounts>;
}

impl ArrangeCompiledAccounts for {{ event.struct_name }} {
    type ArrangedAccounts = ();

    fn arrange_compiled_accounts(_accounts: &[u8]) -> Option<Self::ArrangedAccounts> {
        Some(())
    }
}

